(* Copyright (c) 2001-2015 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)
class SerializationTests usingPlatform: platform testFramework: minitest = Value(
| private TestContext = minitest TestContext.
  private Actors = platform actors.
  private String      = platform kernel String.
  private Array = platform kernel Array.
  private TransferArray = platform kernel TransferArray.
  private ValueArray = platform kernel ValueArray.
  private Vector = platform kernel Vector.
|)(

  public class ValueClass new: a and: b = Value (
      |
        public f1 = a.
        public f2 = b.
      |
    )(
      public verify: clone =(
        con assert: f1 equals: clone f1.
        con assert: f2 equals: clone f2.
      )
    )

  public class SerializationTest = TestContext (
    |
      blockWC = [ :a :b |
        ^ a * b.
      ].
    |
    'Starting SerializationTest' println.
    )(

    public class EmptyClass = ()(
      public test = (
        ^1.
      )
    )

    public class ClassWithFields new: a and: b = (|
      public f1 ::= a.
      public f2 ::= b.
      public f3
      public f4
      public f5
      public f6
    |)(
      public verify: clone =(
        ^(((((f1 = clone f1) and:
        (f1 = clone f1)) and:
        (f1 = clone f1)) and:
        (f1 = clone f1)) and:
        (f1 = clone f1)) and:
        (f1 = clone f1)
      )
    )

    

    public cloneAndVerify: obj = (
      |clone|
      clone:: Actors sclone: obj.
      assert: (obj verify: clone).
    )

    public cloneAndEquals: obj = (
      |clone|
      clone:: Actors sclone: obj.
      assert: obj equals: clone.
    )

    public cloneAndVerifyArray: arr = (
      | clone |
      clone:: Actors sclone: arr.
      arr doIndexes: [ :i |
        assert: (arr at: i) equals: (clone at: i).
      ]
    )

    public testPrimitives = (
      cloneAndEquals: true.
      cloneAndEquals: false.
      cloneAndEquals: 754235.
      cloneAndEquals: -12312684.
      cloneAndEquals: 234.64563.
      cloneAndEquals: nil.
      cloneAndEquals: 'testString123'.
      cloneAndEquals: ''.
    )

    public testObjectWithoutFields = (
      |original clone | 
      original:: EmptyClass new.
      clone:: Actors sclone: original.
      assert: original test equals: clone test.
    )

    public testValues = (
      | original clone |
      original:: ValueClass new: 'test' and: 0.2.
      clone:: Actors sclone: original.
      assert: original f1 equals: clone f1.
      assert: original f2 equals: clone f2.
    )

    public testMutableFields = (
      | original |
      original:: ClassWithFields new: '' and: 0.2.
      original f1: 'test'.
      original f2: 15.
      original f3: 1.634.
      original f4: true.
      original f5: (Array new: 3).
      original f5 at: 1 put: 2.
      original f5 at: 2 put: 5.
      original f5 at: 3 put: 1.
      original f5: EmptyClass new.
      cloneAndVerify: original.
    )

    public testClassReference = (
      | original clone |
      original:: SerializationTest.
      clone:: Actors sclone: original.
      original println.
      clone println.
      assert: original == original.
    )

    (*
    not context free... context also contains a reference to the block itself, 
    such cyclic graphs are currently not surrported
    public testBlockWithoutContext = (
      | original clone |
      original:: blockWC.
      clone:: Actors sclone: original.
      assert: (original value: 21 with: 2) equals: (clone value: 21 with: 2).
    )
    *)
    
    public testSimpleArrays = (
      cloneAndVerifyArray: { 1 . 20 . 33 . 404 }.
      cloneAndVerifyArray: { 1.523 . 2.250 . 235.33 . 436.04 }.
      cloneAndVerifyArray: { true . false . true . true }.
      cloneAndVerifyArray: { '1' . 'eta' . 'lorem ipsum' . 'dolor' }.
    )

    public testMixedArrays = (
      cloneAndVerifyArray: { 1 . 'asdg3hsh' . nil . 0.3 }.
      cloneAndVerifyArray: { true . 5 . 23 . 6 }.
      cloneAndVerifyArray: { true . 5 . 2.3 . 6 }.
    )

    public testTransferArray = (
      | tarr |
      tarr:: TransferArray new: 5.
      tarr at: 1 put: 42.
      tarr at: 2 put: 2.1.
      tarr at: 3 put: 'Thanks for all the fish'.
      tarr at: 4 put: -84.
      tarr at: 5 put: true.
      cloneAndVerifyArray: tarr.
    )

    public testValueArray = (
      | varr |
      varr:: ValueArray new: 5 withAll: [ :i |
        ^i*i.
      ].
      cloneAndVerifyArray: varr.
      assert: varr isValue.
      assert: (Actors sclone: varr) isValue.
    )
  ) : ( TEST_CONTEXT = () )
)
